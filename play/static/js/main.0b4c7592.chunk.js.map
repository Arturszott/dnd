{"version":3,"sources":["components/EnterNameScreen.js","components/svgs/U.js","components/Card.js","components/svgs/Z.js","components/svgs/O.js","components/svgs/V.js","constants.js","actions.js","helpers.js","components/CardBoard.js","components/Timer.js","components/FinishScreen.js","reducer.js","components/PlayScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["React","memo","setName","useState","value","setValue","onChange","useCallback","event","target","className","type","placeholder","onKeyPress","charCode","onClick","U","preventDefault","letterToComponent","z","props","width","height","viewBox","fill","fillRule","d","o","v","u","slotKey","makeMove","onCardDragged","Component","data-key","data-value","data-testid","draggable","Boolean","onDragOver","onDragEnter","onDragLeave","onDragStart","onDragEnd","onDrop","actionTypes","refreshAction","cards","payload","isBottomSlot","key","startsWith","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","renderSlotsFromEntries","entries","otherProps","map","dispatch","slots","started","draggedCard","setDraggedCard","useMemo","allSlotsEntries","topSlotEntries","filter","isTopSlot","bottomSlotEntries","from","to","moveCardAction","topSlots","bottomSlots","penalty","finished","startedAt","time","setTime","clock","setClock","passTime","Date","now","useEffect","setInterval","clearInterval","role","aria-label","name","score","getMessage","initialState","Map","finalScore","reducer","state","action","startingSlots","solution","shuffledCards","slice","join","forEach","i","set","slotsCopy","get","Error","startingCardsValues","useReducer","every","setTimeout","size","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b4c7592.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nimport './EnterNameScreen.css';\n\nexport default React.memo(function EnterNameScreen({ setName }) {\n\tconst [value, setValue] = useState('');\n\tconst onChange = useCallback((event) => {\n\t\tsetValue(event.target.value);\n\t}, []);\n\tconst onKeyPress = (event) => {\n\t\tif (event.charCode === 13) {\n\t\t\tsetName(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"EnterNameScreen\">\n\t\t\t<h1>Hello friend, tell me your name...</h1>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tclassName=\"nameInput\"\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={onChange}\n\t\t\t\tplaceholder=\"Your name here\"\n\t\t\t\tonKeyPress={onKeyPress}\n\t\t\t/>\n\t\t\t<button className=\"submit\" onClick={() => setName(value)}>\n\t\t\t\tLet's go... →\n\t\t\t</button>\n\t\t</div>\n\t);\n});\n","import React from 'react';\n\nfunction U(props) {\n\treturn (\n\t\t<svg width={85} height={131} viewBox=\"0 0 85 131\" {...props}>\n\t\t\t<path\n\t\t\t\tfill=\"#3B0078\"\n\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\td=\"M81.418 47.626a2.78 2.78 0 012.779 2.78v38.907C84.197 112.336 65.534 131 42.51 131 19.487 131 .824 112.336.824 89.313V50.406a2.78 2.78 0 012.779-2.78zM21.667.889c8.442 0 15.285 6.843 15.285 15.285s-6.843 15.285-15.285 15.285S6.382 24.616 6.382 16.174 13.225.889 21.667.889zm41.687 0c8.441 0 15.285 6.843 15.285 15.285s-6.844 15.285-15.285 15.285c-8.442 0-15.286-6.843-15.286-15.285S54.912.889 63.354.889z\"\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\nexport default U;\n","import React from 'react';\n\nimport './Card.css';\n\nimport Z from './svgs/Z';\nimport O from './svgs/O';\nimport V from './svgs/V';\nimport U from './svgs/U';\n\nconst preventDefault = (event) => {\n\tevent.preventDefault();\n};\n\nconst letterToComponent = {\n\tz: Z,\n\to: O,\n\tv: V,\n\tu: U\n};\n\nexport default React.memo(function Card({ value, slotKey, makeMove, onCardDragged }) {\n\tconst Component = letterToComponent[value];\n\n\treturn (\n\t\t<div\n\t\t\tdata-key={slotKey}\n\t\t\tdata-value={value}\n\t\t\tdata-testid={'slot'}\n\t\t\tdraggable={Boolean(value)}\n\t\t\tclassName={'slot ' + (value ? 'has-card' : '')}\n\t\t\tonDragOver={preventDefault}\n\t\t\tonDragEnter={preventDefault}\n\t\t\tonDragLeave={preventDefault}\n\t\t\tonDragStart={() => {\n\t\t\t\tonCardDragged(slotKey);\n\t\t\t}}\n\t\t\tonDragEnd={() => {\n\t\t\t\tonCardDragged(null);\n\t\t\t}}\n\t\t\tonDrop={() => {\n\t\t\t\tmakeMove(slotKey);\n\t\t\t}}\n\t\t>\n\t\t\t{Component ? <Component /> : value}\n\t\t</div>\n\t);\n});\n","import React from 'react';\n\nfunction Z(props) {\n\treturn (\n\t\t<svg width={84} height={84} viewBox=\"0 0 84 84\" {...props}>\n\t\t\t<path\n\t\t\t\tfill=\"#3B0078\"\n\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\td=\"M78.024.626H2.779A2.78 2.78 0 000 3.406v15.285a2.779 2.779 0 002.779 2.779h35.143c2.241 0 3.561 2.516 2.286 4.359L3.013 79.641C1.739 81.484 3.058 84 5.299 84h75.296a2.779 2.779 0 002.779-2.779V65.936a2.779 2.779 0 00-2.779-2.779H44.768c-2.251 0-3.568-2.537-2.273-4.378L80.297 5.004c1.294-1.841-.022-4.378-2.273-4.378\"\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\nexport default Z;\n","import React from 'react';\n\nfunction O(props) {\n\treturn (\n\t\t<svg width={84} height={84} viewBox=\"0 0 84 84\" {...props}>\n\t\t\t<path\n\t\t\t\tfill=\"#3B0078\"\n\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\td=\"M41.963.626C18.94.626.277 19.29.277 42.313.277 65.336 18.94 84 41.963 84S83.65 65.336 83.65 42.313C83.65 19.29 64.986.626 41.963.626\"\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\nexport default O;\n","import React from 'react';\n\nfunction V(props) {\n\treturn (\n\t\t<svg width={81} height={81} viewBox=\"0 0 81 81\" {...props}>\n\t\t\t<path\n\t\t\t\tfill=\"#3B0078\"\n\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\td=\"M77.419.626H3.039C.974.626-.369 2.798.552 4.646l37.089 74.38c1.022 2.049 3.945 2.052 4.971.005l37.291-74.38c.927-1.848-.417-4.025-2.484-4.025\"\n\t\t\t/>\n\t\t</svg>\n\t);\n}\n\nexport default V;\n","export const actionTypes = {\n\tMOVE: 'move',\n\tSTART: 'start',\n\tFINISH: 'finish',\n\tREFRESH: 'refresh'\n};\n","import { actionTypes } from './constants';\n\nexport const moveCardAction = ({ from, to }) => {\n\treturn {\n\t\ttype: actionTypes.MOVE,\n\t\tpayload: { from, to }\n\t};\n};\n\nexport const startAction = () => {\n\treturn {\n\t\ttype: actionTypes.START\n\t};\n};\n\nexport const finishAction = () => {\n\treturn {\n\t\ttype: actionTypes.FINISH\n\t};\n};\n\nexport const refreshAction = ({ cards }) => {\n\treturn {\n\t\ttype: actionTypes.REFRESH,\n\t\tpayload: { cards }\n\t};\n};\n","export const isTopSlot = (key) => key.startsWith('t');\nexport const isBottomSlot = (key) => key.startsWith('b');\n\n// http://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle(array) {\n\tvar currentIndex = array.length,\n\t\ttemporaryValue,\n\t\trandomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\n\nimport Card from './Card';\nimport { moveCardAction, startAction } from '../actions';\nimport { isTopSlot, isBottomSlot } from '../helpers';\n\nfunction renderSlotsFromEntries(entries, otherProps) {\n\treturn entries.map(([key, value]) => <Card key={key} slotKey={key} value={value} {...otherProps} />);\n}\n\nexport default React.memo(function CardBoard({ dispatch, slots, started }) {\n\tconst [draggedCard, setDraggedCard] = useState(null);\n\tconst onCardDragged = (value) => {\n\t\tsetDraggedCard(value);\n\n\t\tif (!started) {\n\t\t\tdispatch(startAction());\n\t\t}\n\t};\n\n\tconst makeMove = (slotKey) => {\n\t\tdispatch(moveCardAction({ from: draggedCard, to: slotKey }));\n\t};\n\n\tconst { topSlotEntries, bottomSlotEntries } = useMemo(() => {\n\t\tconst allSlotsEntries = [...slots.entries()];\n\n\t\treturn {\n\t\t\ttopSlotEntries: allSlotsEntries.filter(([key, value]) => isTopSlot(key)),\n\t\t\tbottomSlotEntries: allSlotsEntries.filter(([key, value]) => isBottomSlot(key))\n\t\t};\n\t}, [slots]);\n\n\tconst otherProps = {\n\t\tmakeMove,\n\t\tonCardDragged\n\t};\n\tconst topSlots = renderSlotsFromEntries(topSlotEntries, otherProps);\n\tconst bottomSlots = renderSlotsFromEntries(bottomSlotEntries, otherProps);\n\n\treturn (\n\t\t<div className=\"cardBoard\">\n\t\t\t<div className=\"row\">{topSlots}</div>\n\t\t\t<div className=\"row\">{bottomSlots}</div>\n\t\t</div>\n\t);\n});\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport './Timer.css';\n\nexport default React.memo(function Timer({ penalty, started, finished, startedAt }) {\n\tconst [time, setTime] = useState(0);\n\tconst [clock, setClock] = useState(null);\n\n\tconst passTime = useCallback(() => {\n\t\tsetTime((Date.now() - startedAt) / 1000);\n\t}, [startedAt]);\n\n\tuseEffect(() => {\n\t\tif (started && !clock) {\n\t\t\tsetClock(setInterval(passTime, 1000));\n\t\t}\n\n\t\treturn () => {\n\t\t\tclearInterval(clock);\n\t\t};\n\t}, [clock, passTime, started, finished]);\n\n\tuseEffect(() => {\n\t\tsetTime(0);\n\t}, [finished]);\n\n\treturn (\n\t\t<span className=\"Timer\">\n\t\t\t<span className=\"icon\" role=\"img\" aria-label=\"clock\">\n\t\t\t\t⏰\n\t\t\t</span>{' '}\n\t\t\tYour score: {penalty + Math.floor(time)} seconds\n\t\t</span>\n\t);\n});\n","import React from 'react';\n\nimport './FinishScreen.css';\n\nconst getMessage = (score) => {\n\tif (score > 100) {\n\t\treturn 'Nice, nice. How about you play again seriously this time?';\n\t}\n\n\tif (score > 50) {\n\t\treturn 'Certainly not the best';\n\t}\n\n\tif (score > 15) {\n\t\treturn 'Not bad!';\n\t}\n\n\tif (score > 5) {\n\t\treturn 'Almost perfect, but there is place for improvement';\n\t}\n\n\treturn 'Thank you for making the logo great again!';\n};\n\nexport default React.memo(function FinishScreen({ name, score }) {\n\treturn (\n\t\t<div className=\"FinishScreen\">\n\t\t\t<h1>\n\t\t\t\tIt's over, {name}. Score: {score}. <br />\n\t\t\t\t{getMessage(score)}\n\t\t\t</h1>\n\t\t\t<p>Game will restart in 10 seconds...</p>\n\t\t</div>\n\t);\n});\n","import { isBottomSlot, shuffle } from './helpers';\nimport { actionTypes } from './constants';\n\nexport const initialState = {\n\tstarted: false,\n\tfinished: false,\n\tslots: new Map(),\n\tstartedAt: null,\n\tpenalty: 0,\n\tfinalScore: null\n};\n\nexport default function reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase actionTypes.REFRESH:\n\t\t\tconst startingSlots = new Map();\n\t\t\tconst solution = new Map();\n\n\t\t\tlet shuffledCards = shuffle(action.payload.cards.slice(0));\n\n\t\t\tif (shuffledCards.length > 1) {\n\t\t\t\twhile (shuffledCards.join('') === action.payload.cards.join('')) {\n\t\t\t\t\tshuffledCards = shuffle(action.payload.cards.slice(0));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tshuffledCards.forEach((value, i) => {\n\t\t\t\tstartingSlots.set(`t${i}`, value);\n\t\t\t\tstartingSlots.set(`b${i}`, null);\n\t\t\t});\n\n\t\t\taction.payload.cards.forEach((value, i) => {\n\t\t\t\tsolution.set(`b${i}`, value);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...initialState,\n\t\t\t\tsolution,\n\t\t\t\tslots: startingSlots\n\t\t\t};\n\t\tcase actionTypes.START:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstartedAt: Date.now(),\n\t\t\t\tstarted: true\n\t\t\t};\n\t\tcase actionTypes.FINISH:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfinalScore: Math.floor(state.penalty + (Date.now() - state.startedAt) / 1000),\n\t\t\t\tfinished: true\n\t\t\t};\n\t\tcase actionTypes.MOVE:\n\t\t\tconst { from, to } = action.payload;\n\t\t\tconst slotsCopy = new Map(state.slots.entries());\n\n\t\t\tslotsCopy.set(from, state.slots.get(to));\n\t\t\tslotsCopy.set(to, state.slots.get(from));\n\n\t\t\tconst penalty = isBottomSlot(to) && state.solution.get(to) !== state.slots.get(from) ? 10 : 0;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpenalty: state.penalty + penalty,\n\t\t\t\tslots: slotsCopy\n\t\t\t};\n\n\t\tdefault:\n\t\t\tthrow new Error('Action type not recognized. Fix it before users will see that!');\n\t}\n}\n","import React, { useReducer, useEffect } from 'react';\n\nimport CardBoard from './CardBoard';\nimport Timer from './Timer';\nimport FinishScreen from './FinishScreen';\n\nimport reducer, { initialState } from '../reducer';\nimport { refreshAction, finishAction } from '../actions';\n\nimport './PlayScreen.css';\n\nexport default React.memo(function PlayScreen({ startingCardsValues, name }) {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tuseEffect(() => {\n\t\tdispatch(refreshAction({ cards: startingCardsValues }));\n\t}, [startingCardsValues]);\n\n\tuseEffect(() => {\n\t\tif (state.started) {\n\t\t\tconst isSolved = [...state.solution.entries()].every(([key, value]) => {\n\t\t\t\treturn state.slots.get(key) === value;\n\t\t\t});\n\n\t\t\tif (isSolved) {\n\t\t\t\tdispatch(finishAction());\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tdispatch(refreshAction({ cards: startingCardsValues }));\n\t\t\t\t}, 10000);\n\t\t\t}\n\t\t}\n\t}, [startingCardsValues, state.slots, state.solution, state.started]);\n\n\treturn (\n\t\t<div className=\"PlayScreen\">\n\t\t\t{state.finished && <FinishScreen name={name} score={state.finalScore} />}\n\t\t\t<div className={'play-area ' + (state.finished ? 'has-finished' : '')}>\n\t\t\t\t<div className=\"top-bar\">\n\t\t\t\t\t<h1>Good luck, {name}!</h1>{' '}\n\t\t\t\t\t<Timer\n\t\t\t\t\t\tstarted={state.started}\n\t\t\t\t\t\tfinished={state.finished}\n\t\t\t\t\t\tpenalty={state.penalty}\n\t\t\t\t\t\tstartedAt={state.startedAt}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{state.slots.size && <CardBoard slots={state.slots} dispatch={dispatch} started={state.started} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n","import React, { useState } from 'react';\n\nimport EnterNameScreen from './EnterNameScreen';\nimport PlayScreen from './PlayScreen';\n\nimport './App.css';\n\nconst startingCardsValues = ['z', 'o', 'o', 'v', 'u'];\n\nfunction App() {\n\tconst [name, setName] = useState('');\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{name ? (\n\t\t\t\t<PlayScreen startingCardsValues={startingCardsValues} name={name} />\n\t\t\t) : (\n\t\t\t\t<EnterNameScreen setName={setName} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}